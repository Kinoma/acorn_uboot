date:		23-September-2012
release:	5.1.3

Release notes for Armada XP U-Boot
==================================

Table of Contents
-----------------
	1. Contents of Release
	2. Supported boards/CPUs
	3. How to build U-Boot
	4. How to upgrade to a new version of U-Boot
	5. How to use MTD partitions
	6. How to use UBIFS
	7. How to use MMC
	8. How to use USB storage device
	9. BIOS and SatR commands.
	10. Limitation
	11. Boot options
	12. Changes from Previous Releases
	13. Known Issues
	14. Disclaimer


1. Contents of Release
======================

Included in current release:
	-) doimage tool and DDR register configuration files.
	-) Binary Image files:
		1. elf file for debugers (e.g. Lauterbach).
		2. srec file for external programer.
		3. u-boot-<spi/nand/nor>.bin -
			U-boot with BootROM header with the boot device is spi, NOR or nand, supporting 1 or 2 DRAM chip selects.
			"gang" indicates NAND Gang Mode support and is optional.
	-) Marvell's U-Boot source code patch.
	-) Support
		- Little/Big endian
		- Uart
		- Auto detect of PCI-E
		- Reset
		- RTC
		- Gigabit Ethernet port
		- SPI Flash
		- SATA IDE
		- DDR2 and DDR3 Marvell
		- Boot from SPI & NAND & NOR & UART
		- Thermal sensor reads
		- USB
		- SD/MMC
		- NAND flash
		- UBI/UBIFS
		- Sample at reset control by i2c
        - Clock gatting
        - DRAM ECC
        - MMC
        - I2C Arbitration.

2. Supported boards/CPU's
=========================

This U-Boot version supports the following boards:
	DB-784600-BP_A0 rev 2.2 (A0)
	DB-784600-BP_B0 rev 2.4 (B0)
	DB-784600-HE rev 1.1 (B0)
	DB-784MP-GP (B0)

3. How to build U-Boot
======================

	1. Download U-Boot release 2011.12 from ftp://ftp.denx.de/pub/u-boot/.
	2. Update the U-Boot release by copying the patch of this release under the source directory:
		$ tar xjvf u-boot-2011.12.tar.bz2
		$ mv u-boot-2011.12 u-boot-2011.12-axp-X.X.X
		$ tar xvf u-boot-2011.12-axp-X.X.X.tar (overwrite all when asked).
	* X.X.X mean the Marvell version used. (for example 5.0.1)
	3. Export your cross compiler using the command:
				export CROSS_COMPILE_BH=/path/to/your/cross/little/endian/compiler
				export CROSS_COMPILE=/path/to/your/cross/compiler
	4. Build the U-Boot binaries as follows:
		$ build.pl -b <board_name> -f <flash_type> -v Marvell version used(for example 5.0.1) [-e -c -o <output> -i <interfaces>]

		-b <board_name>
			armada_xp_db    - Armada XP development board
			armada_xp_rdnas - Armada XP RD NAS board
			armada_xp_pcac  - Armada XP PCAC board
			armada_xp_gp    - Armada XP GP board

		-f <flash_type>
			spi  - boot from SPI
			nor  - boot from NOR
			nand - boot from NAND

		-i <interfaces> A ":" seperated list of supported interfaces:
			nor  - Add nor support
			spi  - Add spi support
			nand - Add nand support

		-e  compile big endian. If not used litlle endian is used

		-o <output> - The output directory/file to place the build image

		-c - clean build

		For example:
		$ build.pl  -f spi -v 5.0.5 -b armada_xp_db -i nand:spi:nor -c -o /tftpboot/armada_xp_db/5.0.5");
		will clean build little endian image for Armada XP board to boot from SPI. 
		The output image will be placed at /tftp/u-boot.bin. The Image wil support spi, NOR and nand interfaces

	*This U-Boot was built using Marvell SDK 6.0 gcc version 4.6.2 (Linaro GCC branch-4.6.2. Marvell GCC 201201-883.01c949de) 

	5. doimage will create a binary file automaticly when compiling.
		If you wish to use the doimage tool, it can be found under /tools/doimage_armada_xp/ It can be compiled from there using the make command.
		you can run ./doimage --help for more help.

4. How to upgrade to a new version of U-Boot
=============================================

	Assuming you have a U-Boot running, follow these instructions:
	--------------------------------------------------------------
	From U-Boot prompt:
	1. setenv serverip <IP address of your TFTP server>
	2. setenv ipaddr <IP address for the board>
	3. bubt <u-boot binary image name> - You can find compiled U-Boot images in the U-Boot release under the images folder.
	   Select the appropriate image based on your configuration.
	   Example: bubt u-boot.bin
	4. If you want to override the environment, Answer y when asked.

	Note:
	-----
	You must use a compatible U-Boot image according to your boot device and sample at reset configuration.
	If you are currently running U-Boot from SPI, then bubt an appropriate U-Boot image from SPI.
	If you are currently running U-Boot from NAND, then bubt an appropriate U-Boot image from NAND.
	If you are currently running U-Boot from NOR, then bubt an appropriate U-Boot image from NOR.

	Burning new U-Boot using Lauterbach debugger:
	---------------------------------------------
	1. Connect the JTAG cable to the board and open Lauterbach Trace32 program.
	2. Turn on the board.
	3. Run Batchfile -> select the appropriate cmm configuration file for your DDR DIMM.
		The cmm files can be found as part of the U-Boot release directory "Lauterbach Scripts".
	4. Load U-Boot elf file. This file can be found under the release directory:
		"Images\<board name>\le\<spi/nand/nor>\" folder.
		Select the file with no extension, called "u-boot-<board name>".
	5. Run->Go (F7).
	6. When U-Boot loads you can use the instructions for updating an existing U-Boot above.

		* NOTE: need to place per88sv581xv7.per/per88sv581xv6.per under T32 ( Windows ).

	Burning new U-Boot using NAND commands:
	---------------------------------------
	1. run the following commands:
	2. setenv serverip <IP address of your TFTP server>
	3. setenv ipaddr <IP address for the board>
	4. tftp 2000000 <image_image>
		* NOTE: You can find compiled U-Boot images in the U-Boot release under the images folder.
		       Select the appropriate image based on your configuration.
		       Example: bubt u-boot-db88fXXX_spi.bin
	5. nand erase 0 d0000
	6. nand write 2000000 0 d0000
	7. reset
		* NOTE: all environment variables will be reseted!

5. How to use MTD partitions
============================
	1. mtdparts is supported in u-boot.
	2. new environment variable is introduced: mtdparts.
	3. mtdparts variable in the same one used to pass to linux kernel and should be defined like below:
		'mtdparts' - partition list
		mtdparts=mtdparts=<mtd-def>[;<mtd-def>...]
			<mtd-def>  := <mtd-id>:<part-def>[,<part-def>...]
			<mtd-id>   := unique device tag used by linux kernel to find mtd device (mtd->name)
			<part-def> := <size>[@<offset>][<name>][<ro-flag>]
			<size>     := standard linux memsize OR '-' to denote all remaining space
			<offset>   := partition start offset within the device
			<name>     := '(' NAME ')'
			<ro-flag>  := when set to 'ro' makes partition read-only (not used, passed to kernel)
	4. for example: mtdparts=mtdparts=dove-nand:4m(boot),-(rootfs)
	5. the command mtdparts should prints the analyzed partitions according to the mtdparts variable, for example:
		>> mtdparts
		device nand0 <dove-nand>, # parts = 2
		 #: name                size                    offset                  mask_flags
		 0: boot                0x000000400000          0x000000000000          0
		 1: rootfs              0x0001ffc00000          0x000000400000          0

		active partition: nand0,0 - (boot) 0x000000400000 @ 0x000000000000

		defaults:
		mtdids  : none
		mtdparts: none
	6. another important variable is the mtdids:
		'mtdids' - linux kernel mtd device id <-> u-boot device id mapping

		mtdids=<idmap>[,<idmap>,...]
		<idmap>    := <dev-id>=<mtd-id>
		<dev-id>   := 'nand'|'nor'|'onenand'<dev-num>
		<dev-num>  := mtd device number, 0...
		<mtd-id>   := unique device tag used by linux kernel to find mtd device (mtd->name)
	7. for example: mtdids=nand0=dove-nand.
	8. mtdparts variable will move automatically (on default u-boot environment) to the linux kernel, no need
	   to add it to the console variable as in older u-boot versions.
	9. it's recommended that you'll use the default values for both of the variables (mtdparts & mtdids).

6. How to use UBIFS
===================
	1. UBIFS is supported in u-boot.
	2. for creating UBI partition and volume and creating UBIFS please refer to the UBI documentation.
	3. after setting the mtdparts & mtdids variables as needed. (SEE paragraph 5), you can scan the mtd
	   partition for the UBI device.
	4. use the command: ubi part, to instruct u-boot on which mtd partition the UBI is on.
		>>ubi part <partition_name> <offset>
			<partition_name> - the mtd partition name, for example: rootfs.
			<offset>         - the offset to the UBI VID header, is should be the sector size of the NAND.
			                   for example: when using GANG mode the value will be 4096, when not the value is 2048.
	5. for example:
		>> ubi part rootfs 4096
		UBI: mtd1 is detached from ubi0
		Creating 1 MTD partitions on "nand0":
		0x000000400000-0x000200000000 : "mtd=1"
		UBI: attaching mtd1 to ubi0
		UBI: physical eraseblock size:   524288 bytes (512 KiB)
		UBI: logical eraseblock size:    516096 bytes
		UBI: smallest flash I/O unit:    4096
		UBI: VID header offset:          4096 (aligned 4096)
		UBI: data offset:                8192
		UBI: attached mtd1 to ubi0
		UBI: MTD device name:            "mtd=1"
		UBI: MTD device size:            8188 MiB
		UBI: number of good PEBs:        16366
		UBI: number of bad PEBs:         10
		UBI: max. allowed volumes:       16
		UBI: wear-leveling threshold:    4096
		UBI: number of internal volumes: 1
		UBI: number of user volumes:     1
		UBI: available PEBs:             0
		UBI: total number of reserved PEBs: 16366
		UBI: number of PEBs reserved for bad PEB handling: 163
		UBI: max/mean erase counter: 7/1
	6. after u-boot scan finishes with no errors, you can now use the UBIFS on the UBI device.
	7. to mount a UBIFS use the command:
		>>ubifsmount <volume_name>
		<volume_name> - the name that the volume created with.
	8. for example:
		>> ubifsmount lzo
		UBIFS: mounted UBI device 0, volume 0, name "lzo"
		UBIFS: mounted read-only
		UBIFS: file system size:   8355078144 bytes (8159256 KiB, 7968 MiB, 16189 LEBs)
		UBIFS: journal size:       10452992 bytes (10208 KiB, 9 MiB, 21 LEBs)
		UBIFS: media format:       w4/r0 (latest is w4/r0)
		UBIFS: default compressor: zlib
		UBIFS: reserved for root:  0 bytes (0 KiB)
	9. now you can ls and load the filesystem on the UBIFS with the commands:
		ubifsls [directory] - list files
			[directory] - optional, files in a 'directory' (default '/' or any other directory, for ex: '/boot')

		ubifsload <addr> <filename> [bytes] - load file 'filename' to address 'addr'
			<addr>     - address to load the file to.
			<filename> - the file name to load. for example: /boot/uImage.
			[bytes]    - optional, bytes to load, when left blank the whole file will be loaded.

7. How to use MMC 
=================
	1. in order to use MMC use the following commands:
	2. to scan for MMC use:
		>> mmc rescan
	3. to see MMC detected use:
		>> mmcinfo <port>
		<port> - the port the MMC is connected to.
		         on 510-BP-B board:
		           U17 is port 0.
		           U28 is port 1.
	4. for example:
		>> mmcinfo 0
		Device: MV_SDHCI
		Manufacturer ID: 1
		OEM: 5041
		Name: S032B
		Tran Speed: 25000000
		Rd Block Len: 512
		SD version 1.0
		High Capacity: No
		Capacity: 31129600
		Bus Width: 1-bit
	5. to list the files on a MMC use:
		fatls/ext2ls <interface> <dev[:part]> [directory] - list files from 'dev' on 'interface' in a 'directory'
			<interface> = mmc
			<dev> = 0
			[part] - the partition number that used.
			[directory] - the directory to list (default '/' or any other directory, for ex: '/boot')
	6. to load files from MMC to memory use:
		ext2ls/fatload <interface> <dev[:part]>  <addr> <filename> [bytes] - load binary file 'filename' from 'dev' on 'interface'
			<interface> = mmc
			<dev> = 0
			[part] - the partition number that used.
			<addr> - target address in memory.
			<filename> - which file to load.
			[bytes] - size to load or file size when left blank.
	* Note: use fat or ext2 commands according to the filesystem created on the USB.

8. How to use USB storage device
================================
	1. to descover the USB devices connected use the command: usb start.
		>> usb start
		(Re)start USB...
		USB:   Register 10011 NbrPorts 1
		USB EHCI 1.00
		scanning bus for devices... 2 USB Device(s) found
		Waiting for storage device(s) to settle before scanning...
			scanning bus for storage devices... 1 Storage Device(s) found
	2. to list the files on a USB use:
		fatls/ext2ls <interface> <dev[:part]> [directory] - list files from 'dev' on 'interface' in a 'directory'
			<interface> = usb
			<dev> = 0
			[part] - the partition number that used.
			[directory] - the directory to list (default '/' or any other directory, for ex: '/boot')
	3. to load files from USB to memory use:
		ext2ls/fatload <interface> <dev[:part]>  <addr> <filename> [bytes] - load binary file 'filename' from 'dev' on 'interface'
			<interface> = usb
			<dev> = 0
			[part] - the partition number that used.
			<addr> - target address in memory.
			<filename> - which file to load.
			[bytes] - size to load or file size when left blank.
	* Note: use fat or ext2 commands according to the filesystem created on the USB.

9. BIOS and SatR commands
=========================
	BIOS:
	1. BIOS command is used to switch between the varios supported modes.
	2. to see all the supported modes please usethe command: bios list.
	3. use the command: bios write <mode> to switch between the different modes.
	4. after setting the relevant mode, reset the board.
	SatR:
	1. SatR command is used to toggle the different Sample At Reset avaliable modes.
	2. use the commnad: SatR to see all the possibilities:
			Usage:
		SatR list cpufreq       - prints the S@R modes list
		SatR list fabfreq       - prints the S@R modes list
		SatR list l2size        - prints the S@R modes list
		SatR list bootsrc       - prints the S@R modes list
		SatR list bootwidth     - prints the S@R modes list
		SatR list cpu0core      - prints the S@R modes list
		SatR list cpusnum       - prints the S@R modes list
		SatR list freq          - prints the S@R modes list
		SatR read cpufreq       - read and print the CPU frequency S@R value
		SatR read fabfreq       - read and print the Fabric frequency S@R value
		SatR read l2size        - read and print the L2 cache size S@R value
		SatR read bootsrc       - read and print the Boot source S@R value
		SatR read bootwidthc    - read and print the Boot device width S@R value
		SatR read cpu0core      - read and print the CPU0 core mode S@R value
		SatR read cpusnum       - read and print the number of CPU cores S@R value
		SatR read freq          - read and print the mode of cpu/ddr freq S@R value
		SatR write cpufreq <val>        - write the S@R with CPU frequency value
		SatR write fabfreq <val>        - write the S@R with Fabric frequency value
		SatR write l2size <val> - write the S@R with L2 cache size value
		SatR write bootsrc <val>        - write the S@R with Boot source value
		SatR write bootwidth <val>      - write the S@R with Boot device width value
		SatR write cpu0core <val>       - write the S@R with CPU0 core mode value
		SatR write cpusnum <val>        - write the S@R with the number of CPU cores
		SatR write freq <val>           - write the S@R with the cpu/ddr freq mode
	3. use SatR list <mode> to get the list of possible values for each <mode>.
	4. use SatR write <mode> <val> to set the needed value, reset is requaired.
	5. use SatR read <mode> to get the current value.
	6. In order to change frequancies please use the following command:
		SatR write freq <val>
		where <val> is one of the option below:
		val     Freq Conf               CPU Freq        CPUFreqMode     Fabric Freq
                                0x4d/[4:2]      0x4e[0]         0x4e/[4:1]
		0       800 / 400 Mhz           0x2             0x1             0x1
		1       1066 / 533 Mhz          0x1             0x0             0x1
		2       1200 / 600 Mhz          0x2             0x0             0x5
		3       1333 / 667 Mhz          0x3             0x0             0x5
		4       667 / 667 Mhz           0x1             0x1             0x3
		5       1200 / 300 Mhz          0x2             0x0             0xc
		6       1333 / 333 Mhz          0x3             0x0             0xc

	7. reset the system for the changes to take effect.


10. Limitation
===============

	Big Endian : supported in V7 BE8.

	ECC DDR.  HCLK:DDR  1:1 (up to 533Mhz)

	DDR Trainning sequence  (1200/600Mhz , 1200/300Mhz)


11. Boot options
=================

    How to boot from NOR
    =====================
	1. Do the following changes on board:
		1.1 R432 -> N.C
		1.2 R429 - 4.7K
	2. Set the following S@R value to switch to boot from NOR
		2.1. SatR write bootsrc 0
		2.2. SatR write bootwidth 1
	3. Burn u-boot using the method discribed above: Burning new U-Boot using Lauterbach debugger

    How to boot from NAND
    ====================
	1. Set the following S@R value to switch to boot from NAND
		2.1. SatR write bootsrc 1
		2.2. SatR write bootwidth 0
	2. Burn u-boot using the method discribed above: Burning new U-Boot using Lauterbach debugger

    How to boot from SPI
    ====================
	1. Set the following S@R value to switch to boot from NAND
		2.1. SatR write bootsrc 3
		2.2. SatR write bootwidth 1
	2. Burn u-boot using the method discribed above: Burning new U-Boot using Lauterbach debugger

    How to boot from UART
    ====================
	1. Set the following S@R value to switch to boot from UART
		2.1. SatR write bootsrc 2
    2. reset the board.
    3. Send New U-boot using XMODEM.


12. Changes from Previous Releases
=================================

	U-Boot 5.1.3 (23-Sep-2012).
	===============================
	1. DDR3 Training Sequence 2.20.0
	2. Fixed loading image from lauterbuch debuger

	U-Boot 5.1.2 (20-Sep-2012).
	===============================
	1. DDR3 Training Sequence 2.19.0
	2. Update GP board MPP(external HDD power ctrl and Fan Ctrl)
	3. Fix Bug in stage boot command.

	
	U-Boot 5.1.1 (19-Sep-2012).
	===============================
	1. DDR3 Training Sequence 2.17.0
	
	U-Boot 5.1.0 (13-Sep-2012).
	===============================
	1. DDR3 Training Sequence 2.16.0
	2. Update VANIR PEX driver. 
	3. Update build script file for UART image.
	4. Added example to customers porting guide
	

	U-Boot 5.0.9 (12-Sep-2012).
	===============================
	1. DDR3 Training Sequence 2.16.99
	2. Update Vanir PEX driver
	3. Update ETH phy 88E154X for jumbo packets
	4. Update UART base register pointers.
	5. Fixed BIOS mode table for B0
	6. Fixed warning in stage boot code


	U-Boot 5.0.8 (6-Sep-2012).
	===============================
	1. DDR3 Training Sequence 2.15.3
	2. Disable print message to UART for boot from UART images
	3. Stage automatic boot Added new command stage_boot, allows to boot from different devices
	4. Enable CONFIG_API option in U-Boot configuration.


	U-Boot 5.0.7 (28-Aug-2012).
	===============================
	1. Fixed-Bug-in-L2-replacement-control.
	2. DDR3 Training Sequence 2.15.2.
	3. High speed PHY V:1.6.0 COM-PHY-20(Amplitude change and SSC enable SATA)
	4. Fixed mmc buffer aligned to 128.

	U-Boot 5.0.6 (23-Aug-2012).
	===============================
	1. Fixed-AVS-enable-disable-only-for-B0 and update AVS value. 
	2. DDR3 Training Sequence 2.15.0.
	3. Fixed DRAM Scrubbing up to 16GB
	4. Code clean up (fixed compilation warning)
	5. Update AXP-B0 SERDES initialization (1.5.0)
	6. Cancel windows overlap testing even for non-LPAE systems.
	7. Update MPP for GP SATA interface.
	8. Support pex scsi VANIR
	9. Fixed-buildall-



	U-Boot 5.0.4 (21-Aug-2012).
	===============================
	1. Add LPAE Support for AXP-B0 (Support > 4GB DRAM size and Support for 4GB per CS DRAM.)
        2. update build scrip for DB AXP-GP
	3. DDR3 Training Sequence 2.12.3 (TWSI read for GP)
	4. Rename board id RD_78460_GP to DB_784MP_GP
        5. Fixed AVS enable/disable only for B0.
	6. Fixed SatR and Bios command for all TWSI bits
	7. Add xmodem tool to enable boot from uart using a command line and minicom.


	U-Boot 5.0.3 (20-Aug-2012).
	===============================
	1. update cmm file for lauterbuch debuger.
        2. update build scrip for DB AXP-GP
	3. DDR3 Training Sequence 2.12.2
	4. update tranning cmd
	5. Fixed SPI M25P64 default parameters for AXP_GP

	U-Boot 5.0.1 (16-Aug-2012).
	===============================
	1. Fixed USB port reset
        2. Support board RD-78460-axp-gp (Up and runnig test only)
	3. DDR3 Training Sequence 2.12.1


	U-Boot 5.0.0 (30-Jul-2012).
	===============================
	1. Support dual DIMM
        2. Support ECC
	3. Add delay 2000 MS on PEX detect link down in GEN2 Vanir PEX
	4. Add Scrubbing to u-boot early stage with suport for dual DIMM
	5. Change binary file name. (u-boot-axp-X.X.X-NAME.bin when X.X.X is version and NAME is spi,nand or nor)


	U-Boot 3.0.3 (11-Jul-2012).
	===============================
	1. Change compiler to SDK 5.1.2
        2. Fixed PEX SERDES sequence initialization.
	3. Fixed initialize PEX vendor ID.
	4. Fixed MMC initialize
        5. DDR3 Training Sequence - version 2.4.1 
	6. Added print dot "." while SPI writing or erasing.


	U-Boot 3.0.2 (24-Apr-2012).
	===============================
	1. Fixed resetenv command

	U-Boot 3.0.1 (19-Apr-2012).
	===============================
	1. Support flashes (boot from nor/nand)
	2. Added atags
	3. Support Marvell monitor extension
	4. Big endian
	5. Aligned the changes from Marvell u-boot 2008.09 version 2.2.1

	U-Boot 3.0.0 (01-Mar-2012).
	===============================
	Initial release. base on uboot 2011.12 and Marvell U-Boot 2.1.1

13. Known issues
================
	1. The USB interface is not tested.
	2. The MMC interface is not tested.
	2. Need to fix PEX Bar overlap test. the test is disabled to allow PEX Bar size of 4GB.
	3. EP Compliance Failure:
		After link disable the EP device goes back to its default configuration (RC mode)
		AR Sergei / Ofer - to check for fix options
	4. Wrong detection of PEX X4 link:
		The link up sequence might finish with x1 width instead of x4 and sometimes with no link at all. The problem was seen on PEX0, PEX2 and PEX3 (PEX1 was never tested due to board limitation).
	5. Link Failure in certain EP combinations:
		No Link might be detected on several PEX slots when specific slots are populated. There is successful link on slot 0.0 and 0.2 when working with one slot only (SATA controller as EP). When trying to work with two controllers on slots above there is no link on any of them.
	6. DSMP EP with DSMP RC fails T2 training stage after reset:
		This issue was reported by a customer.  After issuing an EP reset from the RC (PCI Express Control Register 0x41a00[24] - hot reset); the RC does not reach link status and restarts TS1/TS2 sequence and ends up in compliance mode without link. This issue is consistently reproducible in Linux but NOT in UBOOT.


14. Disclaimer
==============
This document provides preliminary information about the products described, and such information should not be used for
purpose of final design. Visit the Marvell  web site at www.marvell.com for the latest information on Marvell products.

No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, including
photocopying and recording, for any purpose, without the express written permission of Marvell. Marvell retains the right
to make changes to this document at any time, without notice. Marvell makes no warranty of any kind, expressed or implied,
with regard to any information contained in this document, including, but not limited to, the implied warranties of
merchantability or fitness for any particular purpose. Further, Marvell does not warrant the accuracy or completeness of
the information, text, graphics, or other items contained within this document. Marvell makes no commitment either to
update or to keep current the information contained in this document. Marvell products are not designed for use in
life-support equipment or applications that would cause a life-threatening situation if any such products failed.
Do not use Marvell products in these types of equipment or applications. The user should contact Marvell to obtain the
latest specifications before finalizing a product design. Marvell assumes no responsibility, either for use of these
products or for any infringements of patents and trademarks, or other rights of third parties resulting from its use.
No license is granted under any patents, patent rights, or trademarks of Marvell. These products may include one or more
optional functions. The user has the choice of implementing any particular optional function. Should the user choose to
implement any of these optional functions, it is possible that the use could be subject to third party intellectual
property rights. Marvell recommends that the user investigate whether third party intellectual property rights are
relevant to the intended use of these products and obtain licenses as appropriate under relevant intellectual property
rights.
Marvell comprises Marvell Technology Group Ltd. (MTGL) and its subsidiaries, Marvell International Ltd. (MIL),
Marvell Semiconductor, Inc. (MSI), Marvell Asia Pte Ltd. (MAPL), Marvell Japan K.K. (MJKK),
Marvell Semiconductor Israel Ltd. (MSIL), SysKonnect GmbH, and Radlan Computer Communications, Ltd.
Export Controls.  With respect to any of Marvell s Information, the user or recipient, in the absence of appropriate U.S.
government authorization, agrees: 1) not to re-export or release any such information consisting of technology, software
or source code controlled for national security reasons by the U.S. Export Control Regulations ("EAR"), to a national of
EAR Country Groups D:1 or E:2; 2) not to export the direct product of such technology or such software, to EAR Country
Groups D:1 or E:2, if such technology or software and direct products thereof are controlled for national security reasons
by the EAR; and, 3) in the case of technology controlled for national security reasons under the EAR where the direct
product of the technology is a complete plant or component of a plant, not to export to EAR Country Groups D:1 or E:2 the
direct product of the plant or major component thereof, if such direct product is controlled for national security reasons
by the EAR, or is subject to controls under the U.S. Munitions List  ("USML"). At all times hereunder, the recipient of
any such information agrees that they shall be deemed to have manually signed this document in connection with their
receipt of any such information.
Copyright   2004.  Marvell.  All rights reserved.  Marvell, the Marvell logo, Moving Forward Faster, Alaska, and GalNet
are registered trademarks of Marvell.  Discovery, Fastwriter, GalTis, Horizon, Libertas, Link Street, NetGX,
PHY Advantage, Prestera, Raising The Technology Bar, UniMAC, Virtual Cable Tester, and Yukon are trademarks of Marvell.
All other trademarks are the property of their respective owners.
